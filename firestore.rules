/**
 * @file Firebase Security Rules for Jackpot Sign-Up Application
 * @description This ruleset enforces a role-based access control model, with administrators having full access to user registration data.
 *
 * Core Philosophy:
 *   - Strict role-based access control (RBAC) with admin privileges determined by membership in the `/roles_admin` collection.
 *   - User data is stored in `/user_registrations` and is only accessible to admins.
 *
 * Data Structure:
 *   - `/user_registrations/{registrationId}`: Stores user registration data; accessible only by admins.
 *   - `/roles_admin/{adminId}`: Stores admin user IDs. Existence of a document grants admin privileges.
 *
 * Key Security Decisions:
 *   - Only users present as documents in `/roles_admin` can read or write to the `/user_registrations` collection.
 *   - Regular users have no access to the data stored in Firestore.
 *   - Listing user registrations is only permitted for admins.
 *
 * Denormalization for Authorization:
 *   - No denormalization is needed. Admin status is checked via document existence in the `/roles_admin` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user registration data only to administrators.
     * @path /user_registrations/{registrationId}
     * @allow (get, list) if the requesting user is an admin (has a document in /roles_admin/{uid}).
     * @allow (create, update, delete) if the requesting user is an admin.
     * @deny (create, update, delete) if the requesting user is not an admin.
     * @principle Enforces admin-only access to user registration data.
     */
    match /user_registrations/{registrationId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages admin roles based on the existence of a document in this collection.
     * @path /roles_admin/{adminId}
     * @allow get: if isSignedIn() && request.auth.uid == adminId;
     * @allow list: if false;
     * @allow create: if isSignedIn() && request.auth.uid == adminId;
     * @allow update: if false;
     * @allow delete: if isSignedIn() && request.auth.uid == adminId;
     * @principle Enforces that only signed-in users can create, get, or delete their own admin role document.
     */
    match /roles_admin/{adminId} {
      allow get: if isSignedIn() && request.auth.uid == adminId;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == adminId;
      allow update: if false;
      allow delete: if isSignedIn() && request.auth.uid == adminId;
    }

    // Helper functions

    /**
     * @description Checks if the user is signed in.
     * @return True if request.auth is not null, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an administrator by verifying the existence of their UID in the /roles_admin collection.
     * @return True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}