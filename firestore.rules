/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for registered users and role-based access control for admin accounts.
 *
 * Data Structure:
 * - /registered_users/{userId}: Stores data for registered users, accessible only to the user with the matching Firebase Authentication UID.
 * - /admin_accounts/{adminId}: Stores admin account details, accessible only to users with the admin role.
 * - /roles_admin/{userId}: Used to store admin roles; the existence of a document with a user ID in this collection grants admin privileges.
 *
 * Key Security Decisions:
 * - User data is strictly segregated by UID, preventing unauthorized access.
 * - Admin access is controlled via a separate `roles_admin` collection.
 * - Listing of registered users is allowed only for admins (via individual UID subcollections).
 *
 * Denormalization for Authorization:
 * - The `/registered_users/{userId}` collection enforces that the `userId` in the path must match the `request.auth.uid` during creation. This prevents users from creating documents under other users' paths. The rule also enforces that this `userId` cannot be updated.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to registered user data only to the user with the matching UID.
     * @path /registered_users/{userId}
     * @allow (create) User with UID 'user123' can create a document at /registered_users/user123 if request.resource.data.id == 'user123'.
     * @deny (create) User with UID 'user123' cannot create a document at /registered_users/user456.
     * @allow (get, list, update, delete) User with UID 'user123' can access their document at /registered_users/user123.
     * @deny (get, list, update, delete) User with UID 'user123' cannot access document at /registered_users/user456.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /registered_users/{userId} {
      // Function to check if the user is signed in and owns the document
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Function to check if the document exists and the user owns it
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
        
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to admin accounts, granting access only to users with the admin role.
     * @path /admin_accounts/{adminId}
     * @allow (get, list) Admin can read any admin account.
     * @allow (create, update, delete) Admin can create, update, or delete any admin account.
     * @deny (get, list, create, update, delete) Non-admin users cannot access admin accounts.
     * @principle Restricts access to admin data to authorized admin users only.
     */
    match /admin_accounts/{adminId} {
      // Function to check if the user is an admin based on the existence of a document in /roles_admin/{uid}
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages admin roles, granting read and write access only to authenticated users.
     * @path /roles_admin/{userId}
     * @allow (get, list, create) Authenticated user can check and create their admin role if needed.
     * @deny (update, delete) Admin role updates and deletes are disallowed for security reasons.
     */
    match /roles_admin/{userId} {
      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}